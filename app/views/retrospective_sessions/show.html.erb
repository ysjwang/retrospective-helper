<div class="h-screen w-screen bg-gradient-to-br from-gray-900 via-black to-gray-800 relative overflow-hidden fixed inset-0">
  <!-- Animated background grid -->
  <div class="absolute inset-0 opacity-20">
    <div class="grid grid-cols-12 gap-4 h-full">
      <% 12.times do |i| %>
        <div class="border-l border-lime-400/30 animate-pulse" style="animation-delay: <%= i * 0.1 %>s;"></div>
      <% end %>
    </div>
  </div>

  <!-- Tron-style moving grid - full screen -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="tron-grid-container">
      <div class="tron-grid"></div>
      <div class="tron-grid" style="animation-delay: -2s;"></div>
    </div>
  </div>

  <!-- Main content -->
  <div class="relative z-10 flex flex-col items-center justify-center min-h-screen px-4">
    <!-- Glowing title -->
    <h1 class="text-4xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-lime-400 via-lime-300 to-yellow-400 mb-8 text-center leading-tight">
      <span class="drop-shadow-2xl" style="text-shadow: 0 0 20px #84cc16, 0 0 40px #84cc16, 0 0 60px #84cc16;">RETRO SESSION</span>
    </h1>

    <!-- Subtitle with neon effect -->
    <p class="text-lg md:text-xl text-lime-300 mb-8 text-center max-w-2xl leading-relaxed" style="text-shadow: 0 0 10px #84cc16;">
      Share this session ID with your team members
    </p>

    <!-- UUID Input Field and Copy Button -->
    <div class="w-full max-w-2xl mb-8">
      <div class="flex items-center space-x-4">
        <!-- UUID Input Field -->
        <input 
          type="text" 
          value="<%= @retrospective_session.uuid %>" 
          readonly 
          class="flex-1 px-6 py-4 bg-gray-800/50 border-2 border-lime-400 rounded-lg text-lime-300 font-mono text-lg text-center focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20"
          style="text-shadow: 0 0 10px #84cc16;"
          id="uuid-input"
        />
        
        <!-- Copy Button -->
        <button 
          onclick="copyToClipboard()" 
          class="px-6 py-4 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold text-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-lime-400"
          id="copy-button"
        >
          COPY
        </button>
      </div>
      
      <!-- Copy feedback message -->
      <div id="copy-feedback" class="text-center mt-4 text-lime-300 text-lg hidden" style="text-shadow: 0 0 10px #84cc16;">
        ✓ Copied to clipboard!
      </div>
    </div>

    <!-- Back to Home Button -->
    <%= link_to root_path, class: "group relative px-8 py-4 bg-gradient-to-r from-gray-700 to-gray-600 hover:from-gray-600 hover:to-gray-500 text-lime-300 font-bold text-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-gray-500" do %>
      <span class="relative z-10 tracking-wider" style="text-shadow: 0 0 10px #000000;">
        ← BACK TO HOME
      </span>
    <% end %>

    <!-- Decorative elements -->
    <div class="mt-16 flex space-x-8">
      <div class="w-4 h-4 bg-lime-400 rounded-full animate-ping"></div>
      <div class="w-4 h-4 bg-red-500 rounded-full animate-ping" style="animation-delay: 0.5s;"></div>
      <div class="w-4 h-4 bg-purple-500 rounded-full animate-ping" style="animation-delay: 1s;"></div>
    </div>
  </div>

  <!-- Bottom neon line -->
  <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-lime-400 to-transparent"></div>
</div>

<style>
  /* Tron-style moving grid - seamless no gaps */
  .tron-grid-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .tron-grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 200%;
    background-image: 
      linear-gradient(90deg, transparent 0%, transparent 48%, #84cc16 49%, #84cc16 51%, transparent 52%, transparent 100%),
      linear-gradient(0deg, transparent 0%, transparent 48%, #84cc16 49%, #84cc16 51%, transparent 52%, transparent 100%);
    background-size: 80px 80px;
    background-position: 0 0;
    opacity: 0.5;
    animation: tron-move 4s linear infinite;
    transform: rotateX(60deg);
    will-change: transform;
  }

  @keyframes tron-move {
    0% {
      transform: rotateX(60deg) translateY(0%);
    }
    100% {
      transform: rotateX(60deg) translateY(-100%);
    }
  }
</style>

<script>
function copyToClipboard() {
  const uuidInput = document.getElementById('uuid-input');
  const copyButton = document.getElementById('copy-button');
  const copyFeedback = document.getElementById('copy-feedback');
  
  // Select the text in the input field
  uuidInput.select();
  uuidInput.setSelectionRange(0, 99999); // For mobile devices
  
  // Copy to clipboard
  navigator.clipboard.writeText(uuidInput.value).then(function() {
    // Show feedback
    copyFeedback.classList.remove('hidden');
    copyButton.textContent = 'COPIED!';
    copyButton.classList.add('from-green-500', 'to-green-400');
    
    // Reset after 2 seconds
    setTimeout(function() {
      copyFeedback.classList.add('hidden');
      copyButton.textContent = 'COPY';
      copyButton.classList.remove('from-green-500', 'to-green-400');
    }, 2000);
  }).catch(function(err) {
    console.error('Could not copy text: ', err);
    // Fallback for older browsers
    try {
      document.execCommand('copy');
      copyFeedback.classList.remove('hidden');
      copyButton.textContent = 'COPIED!';
      copyButton.classList.add('from-green-500', 'to-green-400');
      
      setTimeout(function() {
        copyFeedback.classList.add('hidden');
        copyButton.textContent = 'COPY';
        copyButton.classList.remove('from-green-500', 'to-green-400');
      }, 2000);
    } catch (err) {
      console.error('Fallback copy failed: ', err);
    }
  });
}
</script>

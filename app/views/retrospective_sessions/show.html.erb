
<div class="min-h-screen w-full bg-gradient-to-br from-gray-900 via-black to-gray-800 relative">
  <!-- Animated background grid -->
  <div class="absolute inset-0 opacity-20">
    <div class="grid grid-cols-12 gap-4 h-full">
      <% 12.times do |i| %>
        <div class="border-l border-lime-400/30 animate-pulse" style="animation-delay: <%= i * 0.1 %>s;"></div>
      <% end %>
    </div>
  </div>

  <!-- Tron-style moving grid - full screen -->
  <div class="absolute inset-0 overflow-hidden">
    <div class="tron-grid-container">
      <div class="tron-grid"></div>
      <div class="tron-grid" style="animation-delay: -2s;"></div>
    </div>
  </div>

  <!-- Main content -->
  <div class="relative z-10 flex flex-col items-center justify-center py-16 px-4">
    <!-- Glowing title -->
    <h1 class="text-4xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-lime-400 via-lime-300 to-yellow-400 mb-8 text-center leading-tight">
      <span class="drop-shadow-2xl" style="text-shadow: 0 0 20px #84cc16, 0 0 40px #84cc16, 0 0 60px #84cc16;">RETRO SESSION</span>
    </h1>

    <!-- Subtitle with neon effect -->
    <p class="text-lg md:text-xl text-lime-300 mb-8 text-center max-w-2xl leading-relaxed" style="text-shadow: 0 0 10px #84cc16;">
      Retrospective session created successfully
    </p>

    <!-- Back to Home Button -->
    <%= link_to root_path, class: "group relative px-8 py-4 bg-gradient-to-r from-gray-700 to-gray-600 hover:from-gray-600 hover:to-gray-500 text-lime-300 font-bold text-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-gray-500" do %>
      <span class="relative z-10 tracking-wider" style="text-shadow: 0 0 10px #000000;">
        ‚Üê BACK TO HOME
      </span>
    <% end %>

    <!-- Decorative elements -->
    <div class="mt-16 flex space-x-8">
      <div class="w-4 h-4 bg-lime-400 rounded-full animate-ping"></div>
      <div class="w-4 h-4 bg-red-500 rounded-full animate-ping" style="animation-delay: 0.5s;"></div>
      <div class="w-4 h-4 bg-purple-500 rounded-full animate-ping" style="animation-delay: 1s;"></div>
    </div>
  </div>

  <!-- Trello Board Section -->
  <div class="relative z-10 w-full max-w-7xl mx-auto px-4 py-8">
    <!-- Board Title -->
    <h2 class="text-3xl font-bold text-lime-300 mb-8 text-center" style="text-shadow: 0 0 10px #84cc16;">
      Retrospective Board
    </h2>


    <!-- Trello Board Container -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <!-- Continue Column -->
      <div class="bg-gray-800/50 border-2 border-lime-400 rounded-lg p-4 min-h-[400px]">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-lime-300" style="text-shadow: 0 0 10px #84cc16;">
            Continue
          </h3>
          <span class="bg-lime-600 text-black px-2 py-1 rounded-full text-sm font-bold">
            <%= @retrospective_session.retrospective_items.continue.count %>
          </span>
        </div>
        <div class="space-y-3" id="continue-column">
          <% @retrospective_session.retrospective_items.continue.each do |item| %>
            <div class="bg-gray-700/50 border border-lime-400/30 rounded-lg p-3 hover:bg-gray-700/70 transition-colors duration-200 relative group" data-item-id="<%= item.id %>">
              <!-- Edit button -->
              <button 
                onclick="openEditModal(<%= item.id %>)" 
                class="absolute top-2 right-2 text-lime-400 hover:text-lime-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-lime-400/20 rounded"
                title="Edit item"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              
              <% if item.name.present? %>
                <h4 class="text-lime-200 font-semibold mb-2 pr-8" style="text-shadow: 0 0 5px #84cc16;">
                  <%= item.name %>
                </h4>
              <% else %>
                <h4 class="text-lime-200 font-semibold mb-2 italic pr-8" style="text-shadow: 0 0 5px #84cc16;">
                  (No title)
                </h4>
              <% end %>
              <% if item.person.present? %>
                <div class="text-xs text-white mb-1">üë§ <%= item.person %></div>
              <% end %>
              <% if item.comments.present? %>
                <p class="text-gray-300 text-sm mb-2">
                  <%= item.comments %>
                </p>
              <% else %>
                <p class="text-gray-500 text-sm mb-2 italic">
                  No comments
                </p>
              <% end %>
              <% if item.due_date.present? %>
                <div class="text-xs text-lime-400">
                  Due: <%= item.due_date.strftime("%b %d, %Y") %>
                </div>
              <% end %>
            </div>
          <% end %>
          <% if @retrospective_session.retrospective_items.continue.empty? %>
            <div class="text-gray-500 text-center py-8 italic">
              No items yet
            </div>
          <% end %>
        </div>
      </div>

      <!-- Start Column -->
      <div class="bg-gray-800/50 border-2 border-blue-400 rounded-lg p-4 min-h-[400px]">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-blue-300" style="text-shadow: 0 0 10px #3b82f6;">
            Start
          </h3>
          <span class="bg-blue-600 text-white px-2 py-1 rounded-full text-sm font-bold">
            <%= @retrospective_session.retrospective_items.start.count %>
          </span>
        </div>
        <div class="space-y-3" id="start-column">
          <% @retrospective_session.retrospective_items.start.each do |item| %>
            <div class="bg-gray-700/50 border border-blue-400/30 rounded-lg p-3 hover:bg-gray-700/70 transition-colors duration-200 relative group" data-item-id="<%= item.id %>">
              <!-- Edit button -->
              <button 
                onclick="openEditModal(<%= item.id %>)" 
                class="absolute top-2 right-2 text-blue-400 hover:text-blue-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-blue-400/20 rounded"
                title="Edit item"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              
              <% if item.name.present? %>
                <h4 class="text-blue-200 font-semibold mb-2 pr-8" style="text-shadow: 0 0 5px #3b82f6;">
                  <%= item.name %>
                </h4>
              <% else %>
                <h4 class="text-blue-200 font-semibold mb-2 italic pr-8" style="text-shadow: 0 0 5px #3b82f6;">
                  (No title)
                </h4>
              <% end %>
              <% if item.person.present? %>
                <div class="text-xs text-white mb-1">üë§ <%= item.person %></div>
              <% end %>
              <% if item.comments.present? %>
                <p class="text-gray-300 text-sm mb-2">
                  <%= item.comments %>
                </p>
              <% else %>
                <p class="text-gray-500 text-sm mb-2 italic">
                  No comments
                </p>
              <% end %>
              <% if item.due_date.present? %>
                <div class="text-xs text-blue-400">
                  Due: <%= item.due_date.strftime("%b %d, %Y") %>
                </div>
              <% end %>
            </div>
          <% end %>
          <% if @retrospective_session.retrospective_items.start.empty? %>
            <div class="text-gray-500 text-center py-8 italic">
              No items yet
            </div>
          <% end %>
        </div>
      </div>

      <!-- Stop Column -->
      <div class="bg-gray-800/50 border-2 border-red-400 rounded-lg p-4 min-h-[400px]">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-red-300" style="text-shadow: 0 0 10px #ef4444;">
            Stop
          </h3>
          <span class="bg-red-600 text-white px-2 py-1 rounded-full text-sm font-bold">
            <%= @retrospective_session.retrospective_items.stop.count %>
          </span>
        </div>
        <div class="space-y-3" id="stop-column">
          <% @retrospective_session.retrospective_items.stop.each do |item| %>
            <div class="bg-gray-700/50 border border-red-400/30 rounded-lg p-3 hover:bg-gray-700/70 transition-colors duration-200 relative group" data-item-id="<%= item.id %>">
              <!-- Edit button -->
              <button 
                onclick="openEditModal(<%= item.id %>)" 
                class="absolute top-2 right-2 text-red-400 hover:text-red-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-red-400/20 rounded"
                title="Edit item"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              
              <% if item.name.present? %>
                <h4 class="text-red-200 font-semibold mb-2 pr-8" style="text-shadow: 0 0 5px #ef4444;">
                  <%= item.name %>
                </h4>
              <% else %>
                <h4 class="text-red-200 font-semibold mb-2 italic pr-8" style="text-shadow: 0 0 5px #ef4444;">
                  (No title)
                </h4>
              <% end %>
              <% if item.person.present? %>
                <div class="text-xs text-white mb-1">üë§ <%= item.person %></div>
              <% end %>
              <% if item.comments.present? %>
                <p class="text-gray-300 text-sm mb-2">
                  <%= item.comments %>
                </p>
              <% else %>
                <p class="text-gray-500 text-sm mb-2 italic">
                  No comments
                </p>
              <% end %>
              <% if item.due_date.present? %>
                <div class="text-xs text-red-400">
                  Due: <%= item.due_date.strftime("%b %d, %Y") %>
                </div>
              <% end %>
            </div>
          <% end %>
          <% if @retrospective_session.retrospective_items.stop.empty? %>
            <div class="text-gray-500 text-center py-8 italic">
              No items yet
            </div>
          <% end %>
        </div>
      </div>

      <!-- Misc Column -->
      <div class="bg-gray-800/50 border-2 border-purple-400 rounded-lg p-4 min-h-[400px]">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-purple-300" style="text-shadow: 0 0 10px #a855f7;">
            Misc
          </h3>
          <span class="bg-purple-600 text-white px-2 py-1 rounded-full text-sm font-bold">
            <%= @retrospective_session.retrospective_items.misc.count %>
          </span>
        </div>
        <div class="space-y-3" id="misc-column">
          <% @retrospective_session.retrospective_items.misc.each do |item| %>
            <div class="bg-gray-700/50 border border-purple-400/30 rounded-lg p-3 hover:bg-gray-700/70 transition-colors duration-200 relative group" data-item-id="<%= item.id %>">
              <!-- Edit button -->
              <button 
                onclick="openEditModal(<%= item.id %>)" 
                class="absolute top-2 right-2 text-purple-400 hover:text-purple-300 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 hover:bg-purple-400/20 rounded"
                title="Edit item"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              
              <% if item.name.present? %>
                <h4 class="text-purple-200 font-semibold mb-2 pr-8" style="text-shadow: 0 0 5px #a855f7;">
                  <%= item.name %>
                </h4>
              <% else %>
                <h4 class="text-purple-200 font-semibold mb-2 italic pr-8" style="text-shadow: 0 0 5px #a855f7;">
                  (No title)
                </h4>
              <% end %>
              <% if item.person.present? %>
                <div class="text-xs text-white mb-1">üë§ <%= item.person %></div>
              <% end %>
              <% if item.comments.present? %>
                <p class="text-gray-300 text-sm mb-2">
                  <%= item.comments %>
                </p>
              <% else %>
                <p class="text-gray-500 text-sm mb-2 italic">
                  No comments
                </p>
              <% end %>
              <% if item.due_date.present? %>
                <div class="text-xs text-purple-400">
                  Due: <%= item.due_date.strftime("%b %d, %Y") %>
                </div>
              <% end %>
            </div>
          <% end %>
          <% if @retrospective_session.retrospective_items.misc.empty? %>
            <div class="text-gray-500 text-center py-8 italic">
              No items yet
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Link Sharing Section -->
  <div class="relative z-10 w-full max-w-4xl mx-auto px-4 py-8">
    <div class="bg-gray-800/50 border-2 border-lime-400 rounded-lg p-8">
      <h3 class="text-2xl font-bold text-lime-300 mb-6 text-center" style="text-shadow: 0 0 10px #84cc16;">
        Share this session with your team
      </h3>
      
      <!-- UUID Input Field and Copy Button -->
      <div class="w-full max-w-2xl mx-auto mb-6">
        <label class="block text-lime-300 text-sm font-bold mb-2 text-center" style="text-shadow: 0 0 10px #84cc16;">
          Session ID (UUID)
        </label>
        <div class="flex items-center space-x-4">
          <!-- UUID Input Field -->
          <input 
            type="text" 
            value="<%= @retrospective_session.uuid %>" 
            readonly 
            class="flex-1 px-6 py-4 bg-gray-800/50 border-2 border-lime-400 rounded-lg text-lime-300 font-mono text-lg text-center focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20"
            style="text-shadow: 0 0 10px #84cc16;"
            id="uuid-input"
          />
          
          <!-- Copy Button -->
          <button 
            onclick="copyToClipboard('uuid-input')" 
            class="px-6 py-4 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold text-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-lime-400"
            id="copy-uuid-button"
          >
            COPY
          </button>
        </div>
      </div>

      <!-- Short URL Input Field and Copy Button -->
      <div class="w-full max-w-2xl mx-auto">
        <label class="block text-lime-300 text-sm font-bold mb-2 text-center" style="text-shadow: 0 0 10px #84cc16;">
          Short URL
        </label>
        <div class="flex items-center space-x-4">
          <!-- Short URL Input Field -->
          <input 
            type="text" 
            value="<%= request.base_url %>/retro/<%= @retrospective_session.uuid %>" 
            readonly 
            class="flex-1 px-6 py-4 bg-gray-800/50 border-2 border-lime-400 rounded-lg text-lime-300 font-mono text-lg text-center focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20"
            style="text-shadow: 0 0 10px #84cc16;"
            id="url-input"
          />
          
          <!-- Copy Button -->
          <button 
            onclick="copyToClipboard('url-input')" 
            class="px-6 py-4 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold text-lg rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-lime-400"
            id="copy-url-button"
          >
            COPY
          </button>
        </div>
        
        <!-- Copy feedback message -->
        <div id="copy-feedback" class="text-center mt-4 text-lime-300 text-lg hidden" style="text-shadow: 0 0 10px #84cc16;">
          ‚úì Copied to clipboard!
        </div>
      </div>
    </div>
  </div>

  <!-- Bottom neon line -->
  <div class="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-transparent via-lime-400 to-transparent"></div>

  <!-- Floating Add Button -->
  <button 
    onclick="openModal()" 
    class="fixed bottom-8 right-8 w-16 h-16 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold text-2xl rounded-full transform transition-all duration-300 hover:scale-110 hover:shadow-2xl border-2 border-lime-400 z-50 flex items-center justify-center"
    style="box-shadow: 0 0 20px #84cc16, 0 0 40px #84cc16;"
  >
    +
  </button>
</div>

<!-- Modal -->
<div id="retrospective-modal" class="fixed inset-0 z-50 hidden">
  <div id="modal-content" class="bg-gray-900 border-2 border-lime-400 rounded-lg w-full max-w-sm relative shadow-2xl" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 80%; max-width: 320px;">
    <!-- Draggable header area -->
    <div id="modal-drag-handle" class="bg-lime-400/30 rounded-t-lg cursor-move flex items-center justify-between px-4 py-3 border-b border-lime-400/50">
      <!-- Drag indicator -->
      <div class="flex items-center space-x-1">
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
      </div>
      
      <!-- Modal title in header -->
      <h2 class="text-lg font-bold text-lime-300" style="text-shadow: 0 0 10px #84cc16;">
        Add Item
      </h2>
      
      <!-- Close button -->
      <button 
        onclick="closeModal()" 
        class="text-lime-400 hover:text-lime-300 text-xl font-bold hover:bg-lime-400/20 rounded-full w-6 h-6 flex items-center justify-center"
      >
        √ó
      </button>
    </div>
    
    <!-- Modal content -->
    <div class="p-4">
    
    <!-- Form -->
    <form id="retrospective-form" onsubmit="submitForm(event)">
      <!-- Category selection -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Category *
        </label>
        <select 
          id="category" 
          required
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
        >
          <option value="">Select a category</option>
          <option value="0">Continue</option>
          <option value="1">Start</option>
          <option value="2">Stop</option>
          <option value="3">Misc</option>
        </select>
      </div>
      
      <!-- Name field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Name
        </label>
        <input 
          type="text" 
          id="name" 
          maxlength="255"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
          placeholder="Enter item name (optional)"
        />
      </div>
      
      <!-- Person field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Person
        </label>
        <input 
          type="text" 
          id="person" 
          maxlength="255"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
          placeholder="Enter person name (optional)"
        />
      </div>
      
      <!-- Comments field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Comments
        </label>
        <textarea 
          id="comments" 
          rows="3" 
          maxlength="1000"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 resize-none text-sm"
          placeholder="Enter comments (optional)"
        ></textarea>
      </div>
      
      <!-- Due date field -->
      <div class="mb-6">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Due Date
        </label>
        <input 
          type="date" 
          id="due_date" 
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
        />
      </div>
      
      <!-- Action buttons -->
      <div class="flex space-x-3">
        <button 
          type="button" 
          onclick="closeModal()" 
          class="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-lime-300 font-bold rounded-lg transform transition-all duration-300 hover:scale-105 border-2 border-gray-500 text-sm"
        >
          Cancel
        </button>
        <button 
          type="submit" 
          class="flex-1 px-4 py-2 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-lime-400 text-sm"
        >
          Save
        </button>
      </div>
    </form>
    </div>
  </div>
</div>

<!-- Edit Modal -->
<div id="edit-retrospective-modal" class="fixed inset-0 z-50 hidden">
  <div id="edit-modal-content" class="bg-gray-900 border-2 border-lime-400 rounded-lg w-full max-w-sm relative shadow-2xl" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 80%; max-width: 320px;">
    <!-- Draggable header area -->
    <div id="edit-modal-drag-handle" class="bg-lime-400/30 rounded-t-lg cursor-move flex items-center justify-between px-4 py-3 border-b border-lime-400/50">
      <!-- Drag indicator -->
      <div class="flex items-center space-x-1">
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
        <div class="w-1.5 h-1.5 bg-lime-400 rounded-full"></div>
      </div>
      
      <!-- Modal title in header -->
      <h2 class="text-lg font-bold text-lime-300" style="text-shadow: 0 0 10px #84cc16;">
        Edit Item
      </h2>
      
      <!-- Close button -->
      <button 
        onclick="closeEditModal()" 
        class="text-lime-400 hover:text-lime-300 text-xl font-bold hover:bg-lime-400/20 rounded-full w-6 h-6 flex items-center justify-center"
      >
        √ó
      </button>
    </div>
    
    <!-- Modal content -->
    <div class="p-4">
    
    <!-- Form -->
    <form id="edit-retrospective-form" onsubmit="submitEditForm(event)">
      <input type="hidden" id="edit-item-id" />
      
      <!-- Category selection -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Category *
        </label>
        <select 
          id="edit-category" 
          required
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
        >
          <option value="">Select a category</option>
          <option value="0">Continue</option>
          <option value="1">Start</option>
          <option value="2">Stop</option>
          <option value="3">Misc</option>
        </select>
      </div>
      
      <!-- Name field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Name
        </label>
        <input 
          type="text" 
          id="edit-name" 
          maxlength="255"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
          placeholder="Enter item name (optional)"
        />
      </div>
      
      <!-- Person field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Person
        </label>
        <input 
          type="text" 
          id="edit-person" 
          maxlength="255"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
          placeholder="Enter person name (optional)"
        />
      </div>
      
      <!-- Comments field -->
      <div class="mb-4">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Comments
        </label>
        <textarea 
          id="edit-comments" 
          rows="3" 
          maxlength="1000"
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 resize-none text-sm"
          placeholder="Enter comments (optional)"
        ></textarea>
      </div>
      
      <!-- Due date field -->
      <div class="mb-6">
        <label class="block text-lime-300 text-xs font-bold mb-1" style="text-shadow: 0 0 10px #84cc16;">
          Due Date
        </label>
        <input 
          type="date" 
          id="edit-due_date" 
          class="w-full px-3 py-2 bg-gray-800 border-2 border-lime-400 rounded-lg text-lime-300 focus:outline-none focus:border-lime-300 focus:ring-2 focus:ring-lime-400/20 text-sm"
        />
      </div>
      
      <!-- Action buttons -->
      <div class="flex space-x-3">
        <button 
          type="button" 
          onclick="closeEditModal()" 
          class="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-lime-300 font-bold rounded-lg transform transition-all duration-300 hover:scale-105 border-2 border-gray-500 text-sm"
        >
          Cancel
        </button>
        <button 
          type="submit" 
          class="flex-1 px-4 py-2 bg-gradient-to-r from-lime-600 to-lime-500 hover:from-lime-500 hover:to-lime-400 text-black font-bold rounded-lg transform transition-all duration-300 hover:scale-105 hover:shadow-2xl border-2 border-lime-400 text-sm"
        >
          Update
        </button>
      </div>
    </form>
    </div>
  </div>
</div>

<style>
  /* Tron-style moving grid - seamless no gaps */
  .tron-grid-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .tron-grid {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 200%;
    background-image: 
      linear-gradient(90deg, transparent 0%, transparent 48%, #84cc16 49%, #84cc16 51%, transparent 52%, transparent 100%),
      linear-gradient(0deg, transparent 0%, transparent 48%, #84cc16 49%, #84cc16 51%, transparent 52%, transparent 100%);
    background-size: 80px 80px;
    background-position: 0 0;
    opacity: 0.5;
    animation: tron-move 4s linear infinite;
    transform: rotateX(60deg);
    will-change: transform;
  }

  @keyframes tron-move {
    0% {
      transform: rotateX(60deg) translateY(0%);
    }
    100% {
      transform: rotateX(60deg) translateY(-100%);
    }
  }
</style>

<script>
function copyToClipboard(inputId) {
  const input = document.getElementById(inputId);
  const buttonId = inputId === 'uuid-input' ? 'copy-uuid-button' : 'copy-url-button';
  const copyButton = document.getElementById(buttonId);
  const copyFeedback = document.getElementById('copy-feedback');
  
  // Select the text in the input field
  input.select();
  input.setSelectionRange(0, 99999); // For mobile devices
  
  // Copy to clipboard
  navigator.clipboard.writeText(input.value).then(function() {
    // Show feedback
    copyFeedback.classList.remove('hidden');
    copyButton.textContent = 'COPIED!';
    copyButton.classList.add('from-green-500', 'to-green-400');
    
    // Reset after 2 seconds
    setTimeout(function() {
      copyFeedback.classList.add('hidden');
      copyButton.textContent = 'COPY';
      copyButton.classList.remove('from-green-500', 'to-green-400');
    }, 2000);
  }).catch(function(err) {
    console.error('Could not copy text: ', err);
    // Fallback for older browsers
    try {
      document.execCommand('copy');
      copyFeedback.classList.remove('hidden');
      copyButton.textContent = 'COPIED!';
      copyButton.classList.add('from-green-500', 'to-green-400');
      
      setTimeout(function() {
        copyFeedback.classList.add('hidden');
        copyButton.textContent = 'COPY';
        copyButton.classList.remove('from-green-500', 'to-green-400');
      }, 2000);
    } catch (err) {
      console.error('Fallback copy failed: ', err);
    }
  });
}

// Modal functions
function openModal() {
  const modal = document.getElementById('retrospective-modal');
  modal.classList.remove('hidden');
  // Don't prevent background scrolling to keep background visible
}

function closeModal() {
  const modal = document.getElementById('retrospective-modal');
  modal.classList.add('hidden');
  resetForm();
}

// Drag functionality
let isDragging = false;
let currentX = 0;
let currentY = 0;
let initialX = 0;
let initialY = 0;
let xOffset = 0;
let yOffset = 0;

function initDrag() {
  const modalContent = document.getElementById('modal-content');
  const dragHandle = document.getElementById('modal-drag-handle');
  
  if (!dragHandle) {
    console.log('Drag handle not found');
    return;
  }
  
  console.log('Initializing drag functionality');
  
  dragHandle.addEventListener('mousedown', dragStart);
  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', dragEnd);
  
  // Prevent text selection while dragging
  dragHandle.addEventListener('selectstart', function(e) {
    e.preventDefault();
  });
  
  // Prevent default drag behavior
  dragHandle.addEventListener('dragstart', function(e) {
    e.preventDefault();
  });
}

function dragStart(e) {
  console.log('Drag start triggered');
  
  // Don't start dragging if clicking on the close button
  if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
    return;
  }
  
  isDragging = true;
  initialX = e.clientX - xOffset;
  initialY = e.clientY - yOffset;
  
  console.log('Starting drag at:', initialX, initialY);
}

function drag(e) {
  if (isDragging) {
    e.preventDefault();
    currentX = e.clientX - initialX;
    currentY = e.clientY - initialY;
    
    xOffset = currentX;
    yOffset = currentY;
    
    const modalContent = document.getElementById('modal-content');
    modalContent.style.transform = `translate(${currentX}px, ${currentY}px)`;
  }
}

function dragEnd(e) {
  if (isDragging) {
    console.log('Drag end');
    isDragging = false;
  }
}

// Initialize drag functionality when the page loads
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ DOM Content Loaded - Initializing components...');
  initDrag();
  initActionCable();
});

// Also try to initialize ActionCable immediately (in case DOMContentLoaded doesn't fire)
if (document.readyState === 'loading') {
  console.log('üìÑ Document still loading, waiting for DOMContentLoaded...');
} else {
  console.log('üìÑ Document already loaded, initializing ActionCable immediately...');
  initActionCable();
}

// ActionCable functionality
function initActionCable() {
  console.log('üöÄ Initializing ActionCable...');
  console.log('üîç Debug info:', {
    ActionCableAvailable: typeof ActionCable !== 'undefined',
    DocumentReady: document.readyState,
    Location: window.location.href
  });
  
  // Check if ActionCable is available
  if (typeof ActionCable === 'undefined') {
    console.error('‚ùå ActionCable is not available. Make sure it\'s properly imported.');
    console.log('üîç Available global objects:', Object.keys(window).filter(key => key.includes('Action') || key.includes('Cable')));
    return;
  }
  
  console.log('‚úÖ ActionCable is available, creating consumer...');
  
  // Create ActionCable consumer with proper URL for production
  let consumer;
  try {
    // Use wss:// for production HTTPS, ws:// for development
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const cableUrl = `${protocol}//${window.location.host}/cable`;
    console.log('üîó Connecting to ActionCable at:', cableUrl);
    consumer = ActionCable.createConsumer(cableUrl);
    console.log('üîå ActionCable consumer created:', consumer);
    
    // Add error handling for WebSocket connection (using the correct API)
    if (consumer.connection && consumer.connection.webSocket) {
      consumer.connection.webSocket.addEventListener('error', (error) => {
        console.error('‚ùå WebSocket connection error:', error);
      });
      
      consumer.connection.webSocket.addEventListener('open', () => {
        console.log('‚úÖ WebSocket connection opened');
      });
      
      consumer.connection.webSocket.addEventListener('close', () => {
        console.log('‚ùå WebSocket connection closed');
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error creating ActionCable consumer:', error);
    return;
  }
  
  // Subscribe to the retrospective session channel
  const subscription = consumer.subscriptions.create(
    { 
      channel: "RetrospectiveSessionChannel", 
      session_id: <%= @retrospective_session.id %>
    },
    {
      connected() {
        console.log('‚úÖ Connected to retrospective session channel for session ID:', <%= @retrospective_session.id %>);
        console.log('üîó WebSocket connection established');
        console.log('üì° Subscription state:', subscription.state);
        console.log('üì° Subscription connected:', subscription.connected);
        console.log('üì° Consumer connection state:', consumer.connection.state);
      },
      
      disconnected() {
        console.log('‚ùå Disconnected from retrospective session channel');
        console.log('üì° Subscription state:', subscription.state);
      },
      
      rejected() {
        console.error('‚ùå Connection rejected by server');
        console.log('üì° Subscription state:', subscription.state);
      },
      
      received(data) {
        console.log('üì® Received live update:', data);
        
        if (data.type === 'item_created') {
          console.log('üÜï Processing new item:', data.item);
          // Add the new item to the appropriate column
          addItemToColumn(data.item);
          updateColumnCounters();
          
          // Show a notification that a new item was added by another user
          showNotification('New retrospective item added by another user!');
        } else if (data.type === 'item_updated') {
          console.log('‚úèÔ∏è Processing updated item:', data.item);
          // Update the existing item in the appropriate column
          updateItemInColumn(data.item);
          
          // Show a notification that an item was updated by another user
          showNotification('Retrospective item updated by another user!');
        }
      }
    }
  );
  
  // Store subscription globally for cleanup if needed
  window.retrospectiveSubscription = subscription;
  console.log('üì° ActionCable subscription created:', subscription);
  
  // Test the connection after a short delay
  setTimeout(() => {
    console.log('üîç Connection test - WebSocket state:', subscription.state);
    console.log('üîç Subscription connected:', subscription.connected);
    console.log('üîç Consumer connection state:', consumer.connection ? consumer.connection.state : 'undefined');
    console.log('üîç Consumer connection:', consumer.connection);
    
    // Check both state and connected properties
    const isConnected = subscription.state === 'connected' || subscription.connected === true;
    
    if (isConnected) {
      console.log('‚úÖ Connection test passed - WebSocket is working');
    } else {
      console.warn('‚ö†Ô∏è Connection test failed - WebSocket state:', subscription.state, 'connected:', subscription.connected);
      console.log('üîç Full subscription object:', subscription);
      console.log('üîç Full consumer object:', consumer);
    }
  }, 1000);
}

// Add a manual test function for debugging (always available)
window.testWebSocket = function() {
  console.log('üß™ Testing WebSocket endpoint...');
  fetch('/cable', { method: 'GET' })
    .then(response => {
      console.log('üì° WebSocket endpoint response:', response.status, response.statusText);
      return response.text();
    })
    .then(text => {
      console.log('üì° WebSocket endpoint content:', text.substring(0, 200));
    })
    .catch(error => {
      console.error('‚ùå WebSocket endpoint test failed:', error);
    });
  console.log('üß™ Manual WebSocket test triggered');
  
  if (window.retrospectiveSubscription) {
    console.log('üì° Subscription state:', window.retrospectiveSubscription.state);
    console.log('üì° Subscription connected:', window.retrospectiveSubscription.connected);
  } else {
    console.log('‚ùå No subscription found');
  }
  
  // Try to create a test item
  fetch(`/retrospective_sessions/<%= @retrospective_session.id %>/items`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      retrospective_item: {
        category: 3,
        name: 'Manual Test',
        person: 'Debug',
        comments: 'Testing WebSocket manually'
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    console.log('üì§ Test item created:', data);
  })
  .catch(error => {
    console.error('‚ùå Test failed:', error);
  });
};

console.log('üß™ Manual test available: window.testWebSocket()');

function showNotification(message) {
  // Create a temporary notification
  const notificationDiv = document.createElement('div');
  notificationDiv.className = 'fixed top-4 left-4 bg-blue-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300';
  notificationDiv.textContent = message;
  document.body.appendChild(notificationDiv);
  
  // Remove the notification after 3 seconds
  setTimeout(() => {
    notificationDiv.remove();
  }, 3000);
}

function resetForm() {
  document.getElementById('retrospective-form').reset();
}

function addItemToColumn(item) {
  const categoryMap = {
    0: 'continue-column',    // continue
    1: 'start-column',       // start
    2: 'stop-column',        // stop
    3: 'misc-column'         // misc
  };
  
  // Handle both string and integer category values
  const stringToIntMap = {
    'continue': 0,
    'start': 1,
    'stop': 2,
    'misc': 3
  };
  
  // Convert string category to integer if needed
  let categoryInt = item.category;
  if (typeof item.category === 'string') {
    categoryInt = stringToIntMap[item.category];
  }
  
  const columnId = categoryMap[categoryInt];
  const column = document.getElementById(columnId);
  
  if (!column) {
    console.error('Column not found:', columnId);
    return;
  }
  
  // Remove "No items yet" message if it exists
  const noItemsMessage = column.querySelector('.text-gray-500.text-center.py-8.italic');
  if (noItemsMessage) {
    noItemsMessage.remove();
  }
  
  // Create the new item element
  const itemElement = createItemElement(item, columnId);
  
  // Add the item to the column
  column.appendChild(itemElement);
  
  // Add a subtle animation effect
  itemElement.style.opacity = '0';
  itemElement.style.transform = 'translateY(-10px)';
  setTimeout(() => {
    itemElement.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    itemElement.style.opacity = '1';
    itemElement.style.transform = 'translateY(0)';
  }, 10);
}

function createItemElement(item, columnId) {
  const div = document.createElement('div');
  
  // Determine styling based on column
  let borderColor, textColor, textShadow, dueDateColor;
  switch(columnId) {
    case 'continue-column':
      borderColor = 'border-lime-400/30';
      textColor = 'text-lime-200';
      textShadow = 'text-shadow: 0 0 5px #84cc16;';
      dueDateColor = 'text-lime-400';
      break;
    case 'start-column':
      borderColor = 'border-blue-400/30';
      textColor = 'text-blue-200';
      textShadow = 'text-shadow: 0 0 5px #3b82f6;';
      dueDateColor = 'text-blue-400';
      break;
    case 'stop-column':
      borderColor = 'border-red-400/30';
      textColor = 'text-red-200';
      textShadow = 'text-shadow: 0 0 5px #ef4444;';
      dueDateColor = 'text-red-400';
      break;
    case 'misc-column':
      borderColor = 'border-purple-400/30';
      textColor = 'text-purple-200';
      textShadow = 'text-shadow: 0 0 5px #a855f7;';
      dueDateColor = 'text-purple-400';
      break;
  }
  
  const name = item.name || '(No title)';
  const person = item.person || '';
  const comments = item.comments || 'No comments';
  const dueDate = item.due_date ? `<div class="text-xs ${dueDateColor}">Due: ${item.due_date}</div>` : '';
  const personDisplay = person ? `<div class="text-xs text-white mb-1">üë§ ${person}</div>` : '';
  
  div.className = `bg-gray-700/50 border ${borderColor} rounded-lg p-3 hover:bg-gray-700/70 transition-colors duration-200 relative group`;
  div.setAttribute('data-item-id', item.id);
  // Determine button color based on column
  let buttonColor, buttonHoverColor, buttonBgColor;
  switch(columnId) {
    case 'continue-column':
      buttonColor = 'text-lime-400';
      buttonHoverColor = 'hover:text-lime-300';
      buttonBgColor = 'hover:bg-lime-400/20';
      break;
    case 'start-column':
      buttonColor = 'text-blue-400';
      buttonHoverColor = 'hover:text-blue-300';
      buttonBgColor = 'hover:bg-blue-400/20';
      break;
    case 'stop-column':
      buttonColor = 'text-red-400';
      buttonHoverColor = 'hover:text-red-300';
      buttonBgColor = 'hover:bg-red-400/20';
      break;
    case 'misc-column':
      buttonColor = 'text-purple-400';
      buttonHoverColor = 'hover:text-purple-300';
      buttonBgColor = 'hover:bg-purple-400/20';
      break;
  }
  
  div.innerHTML = `
    <button 
      onclick="openEditModal(${item.id})" 
      class="absolute top-2 right-2 ${buttonColor} ${buttonHoverColor} opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-1 ${buttonBgColor} rounded"
      title="Edit item"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
      </svg>
    </button>
    <h4 class="${textColor} font-semibold mb-2 pr-8" style="${textShadow}">
      ${name}
    </h4>
    ${personDisplay}
    <p class="text-gray-300 text-sm mb-2">
      ${comments}
    </p>
    ${dueDate}
  `;
  
  return div;
}

function updateColumnCounters() {
  // Update each column's counter
  const columns = [
    { id: 'continue-column', counterSelector: '.bg-lime-600' },
    { id: 'start-column', counterSelector: '.bg-blue-600' },
    { id: 'stop-column', counterSelector: '.bg-red-600' },
    { id: 'misc-column', counterSelector: '.bg-purple-600' }
  ];
  
  columns.forEach(column => {
    const columnElement = document.getElementById(column.id);
    const counterElement = columnElement.querySelector(column.counterSelector);
    if (counterElement) {
      const currentCount = columnElement.children.length;
      counterElement.textContent = currentCount;
    }
  });
}

function submitForm(event) {
  event.preventDefault();
  
  const formData = {
    retrospective_item: {
      category: parseInt(document.getElementById('category').value),
      name: document.getElementById('name').value,
      person: document.getElementById('person').value,
      comments: document.getElementById('comments').value,
      due_date: document.getElementById('due_date').value
    }
  };
  
  // Show loading state
  const submitButton = event.target.querySelector('button[type="submit"]');
  const originalText = submitButton.textContent;
  submitButton.textContent = 'Saving...';
  submitButton.disabled = true;
  
  // Submit the form
  fetch(`/retrospective_sessions/<%= @retrospective_session.id %>/items`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.status === 'success') {
      closeModal();
      addItemToColumn(data.item);
      updateColumnCounters();
      showSuccessMessage();
    } else {
      throw new Error(data.message || 'Failed to save item');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Failed to save the retrospective item. Please try again.');
  })
  .finally(() => {
    // Reset button state
    submitButton.textContent = originalText;
    submitButton.disabled = false;
  });
}

function showSuccessMessage() {
  // Create a temporary success message
  const successDiv = document.createElement('div');
  successDiv.className = 'fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300';
  successDiv.textContent = '‚úì Retrospective item saved successfully!';
  document.body.appendChild(successDiv);
  
  // Remove the success message after 2 seconds
  setTimeout(() => {
    successDiv.remove();
  }, 2000);
}

// Close modal when clicking outside (removed since we don't have overlay anymore)
// Users can close modal using the X button or Escape key

// Close modal with Escape key
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    const modal = document.getElementById('retrospective-modal');
    const editModal = document.getElementById('edit-retrospective-modal');
    if (!modal.classList.contains('hidden')) {
      closeModal();
    } else if (!editModal.classList.contains('hidden')) {
      closeEditModal();
    }
  }
});

// Edit modal functions
function openEditModal(itemId) {
  console.log('Opening edit modal for item:', itemId);
  
  // Fetch the item data
  fetch(`/retrospective_sessions/<%= @retrospective_session.id %>/items/${itemId}/edit`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      // Populate the edit form with the item data
      document.getElementById('edit-item-id').value = data.item.id;
      document.getElementById('edit-category').value = data.item.category;
      document.getElementById('edit-name').value = data.item.name || '';
      document.getElementById('edit-person').value = data.item.person || '';
      document.getElementById('edit-comments').value = data.item.comments || '';
      document.getElementById('edit-due_date').value = data.item.due_date || '';
      
      // Show the edit modal
      const editModal = document.getElementById('edit-retrospective-modal');
      editModal.classList.remove('hidden');
      
      // Initialize drag functionality for edit modal
      initEditDrag();
    } else {
      throw new Error(data.message || 'Failed to load item data');
    }
  })
  .catch(error => {
    console.error('Error loading item data:', error);
    alert('Failed to load the retrospective item. Please try again.');
  });
}

function closeEditModal() {
  const editModal = document.getElementById('edit-retrospective-modal');
  editModal.classList.add('hidden');
  resetEditForm();
}

function resetEditForm() {
  document.getElementById('edit-retrospective-form').reset();
}

// Edit modal drag functionality
let isEditDragging = false;
let editCurrentX = 0;
let editCurrentY = 0;
let editInitialX = 0;
let editInitialY = 0;
let editXOffset = 0;
let editYOffset = 0;

function initEditDrag() {
  const editModalContent = document.getElementById('edit-modal-content');
  const editDragHandle = document.getElementById('edit-modal-drag-handle');
  
  if (!editDragHandle) {
    console.log('Edit drag handle not found');
    return;
  }
  
  console.log('Initializing edit drag functionality');
  
  editDragHandle.addEventListener('mousedown', editDragStart);
  document.addEventListener('mousemove', editDrag);
  document.addEventListener('mouseup', editDragEnd);
  
  // Prevent text selection while dragging
  editDragHandle.addEventListener('selectstart', function(e) {
    e.preventDefault();
  });
  
  // Prevent default drag behavior
  editDragHandle.addEventListener('dragstart', function(e) {
    e.preventDefault();
  });
}

function editDragStart(e) {
  console.log('Edit drag start triggered');
  
  // Don't start dragging if clicking on the close button
  if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
    return;
  }
  
  isEditDragging = true;
  editInitialX = e.clientX - editXOffset;
  editInitialY = e.clientY - editYOffset;
  
  console.log('Starting edit drag at:', editInitialX, editInitialY);
}

function editDrag(e) {
  if (isEditDragging) {
    e.preventDefault();
    editCurrentX = e.clientX - editInitialX;
    editCurrentY = e.clientY - editInitialY;
    
    editXOffset = editCurrentX;
    editYOffset = editCurrentY;
    
    const editModalContent = document.getElementById('edit-modal-content');
    editModalContent.style.transform = `translate(${editCurrentX}px, ${editCurrentY}px)`;
  }
}

function editDragEnd(e) {
  if (isEditDragging) {
    console.log('Edit drag end');
    isEditDragging = false;
  }
}

function submitEditForm(event) {
  event.preventDefault();
  
  const itemId = document.getElementById('edit-item-id').value;
  const formData = {
    retrospective_item: {
      category: parseInt(document.getElementById('edit-category').value),
      name: document.getElementById('edit-name').value,
      person: document.getElementById('edit-person').value,
      comments: document.getElementById('edit-comments').value,
      due_date: document.getElementById('edit-due_date').value
    }
  };
  
  // Show loading state
  const submitButton = event.target.querySelector('button[type="submit"]');
  const originalText = submitButton.textContent;
  submitButton.textContent = 'Updating...';
  submitButton.disabled = true;
  
  // Submit the form
  fetch(`/retrospective_sessions/<%= @retrospective_session.id %>/items/${itemId}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.status === 'success') {
      closeEditModal();
      updateItemInColumn(data.item);
      showSuccessMessage('Retrospective item updated successfully!');
    } else {
      throw new Error(data.message || 'Failed to update item');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Failed to update the retrospective item. Please try again.');
  })
  .finally(() => {
    // Reset button state
    submitButton.textContent = originalText;
    submitButton.disabled = false;
  });
}

function updateItemInColumn(item) {
  // Find the item element by ID and update its content
  const itemElements = document.querySelectorAll('[data-item-id]');
  let itemElement = null;
  
  // Look for existing item with this ID
  itemElements.forEach(element => {
    if (element.getAttribute('data-item-id') == item.id) {
      itemElement = element;
    }
  });
  
  if (itemElement) {
    // Update the item content
    const categoryMap = {
      'continue': 0,
      'start': 1,
      'stop': 2,
      'misc': 3
    };
    
    const categoryInt = categoryMap[item.category] || item.category;
    
    // Determine styling based on current column
    let borderColor, textColor, textShadow, dueDateColor;
    const currentColumn = itemElement.closest('[id$="-column"]');
    const columnId = currentColumn ? currentColumn.id : '';
    
    switch(columnId) {
      case 'continue-column':
        borderColor = 'border-lime-400/30';
        textColor = 'text-lime-200';
        textShadow = 'text-shadow: 0 0 5px #84cc16;';
        dueDateColor = 'text-lime-400';
        break;
      case 'start-column':
        borderColor = 'border-blue-400/30';
        textColor = 'text-blue-200';
        textShadow = 'text-shadow: 0 0 5px #3b82f6;';
        dueDateColor = 'text-blue-400';
        break;
      case 'stop-column':
        borderColor = 'border-red-400/30';
        textColor = 'text-red-200';
        textShadow = 'text-shadow: 0 0 5px #ef4444;';
        dueDateColor = 'text-red-400';
        break;
      case 'misc-column':
        borderColor = 'border-purple-400/30';
        textColor = 'text-purple-200';
        textShadow = 'text-shadow: 0 0 5px #a855f7;';
        dueDateColor = 'text-purple-400';
        break;
    }
    
    const name = item.name || '(No title)';
    const person = item.person || '';
    const comments = item.comments || 'No comments';
    const dueDate = item.due_date ? `<div class="text-xs ${dueDateColor}">Due: ${item.due_date}</div>` : '';
    const personDisplay = person ? `<div class="text-xs text-white mb-1">üë§ ${person}</div>` : '';
    
    // Update the content
    const titleElement = itemElement.querySelector('h4');
    if (titleElement) {
      titleElement.textContent = name;
    }
    
    // Update person, comments, and due date
    const personElement = itemElement.querySelector('.text-xs.text-white.mb-1');
    if (personElement) {
      personElement.innerHTML = personDisplay;
    } else if (person) {
      // Add person element if it doesn't exist
      const titleElement = itemElement.querySelector('h4');
      if (titleElement) {
        titleElement.insertAdjacentHTML('afterend', personDisplay);
      }
    }
    
    const commentsElement = itemElement.querySelector('.text-gray-300.text-sm.mb-2, .text-gray-500.text-sm.mb-2.italic');
    if (commentsElement) {
      commentsElement.textContent = comments;
      commentsElement.className = comments === 'No comments' ? 'text-gray-500 text-sm mb-2 italic' : 'text-gray-300 text-sm mb-2';
    }
    
    const dueDateElement = itemElement.querySelector('.text-xs');
    if (dueDateElement && dueDateElement.textContent.includes('Due:')) {
      dueDateElement.innerHTML = dueDate;
    } else if (item.due_date) {
      // Add due date element if it doesn't exist
      itemElement.insertAdjacentHTML('beforeend', dueDate);
    }
    
    // Check if item needs to be moved to a different column
    const targetColumnId = getColumnIdForCategory(categoryInt);
    const targetColumn = document.getElementById(targetColumnId);
    
    if (targetColumn && currentColumn && currentColumn.id !== targetColumnId) {
      // Move item to new column
      const newItemElement = createItemElement(item, targetColumnId);
      newItemElement.setAttribute('data-item-id', item.id);
      targetColumn.appendChild(newItemElement);
      itemElement.remove();
      
      // Update column counters
      updateColumnCounters();
    }
  }
}

function getColumnIdForCategory(category) {
  const categoryMap = {
    0: 'continue-column',    // continue
    1: 'start-column',       // start
    2: 'stop-column',        // stop
    3: 'misc-column'         // misc
  };
  
  return categoryMap[category];
}

function showSuccessMessage(message) {
  // Create a temporary success message
  const successDiv = document.createElement('div');
  successDiv.className = 'fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform transition-all duration-300';
  successDiv.textContent = message;
  document.body.appendChild(successDiv);
  
  // Remove the success message after 2 seconds
  setTimeout(() => {
    successDiv.remove();
  }, 2000);
}
</script>
